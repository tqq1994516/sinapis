[package]
name = "sinapis"
version = "0.0.1"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[workspace]
resolver = "2"
members = [
    "entity",
    "layer",
    "macros",
    "migration",
    "utils",
    "volo-gen",
    "person-center",
    "frontend-base-service",
    "idgen",
    "pool",
    "crypto_tool",
    "proxy",
    "identification_plugin",
]

[lib]
crate-type = ["cdylib"]

[features]
hydrate = [
    "leptos/hydrate",
    "thaw/hydrate",
    "dep:wasm-bindgen",
]
ssr = [
    "dep:tracing",
    "dep:leptos_wasi",
    "dep:wasi",
    "dep:dotenv",
    "dep:wit-bindgen",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "thaw/ssr",
    "leptos-use/ssr",
]

[dependencies]
serde_json = "*"
console_error_panic_hook = "*"
anyhow = "*"
leptos_meta = "*"
futures = "*"
bytes = "*"
thiserror = "*"
chrono = "*"
jsonwebtoken = "*"
forwarded-header-value = "*"
regex = "*"
codee = "*"
hydration_context = "*"

wit-bindgen = { version = "*", optional = true }
wasm-bindgen = { version = "0.2.99", optional = true }  # 和cargo-leptos版本绑定,当前：0.2.24
wasi = { version = "0.13.3", optional = true }
serde = { version = "*", features = ["derive"] }
leptos = { version = "*", features = ["nightly", "islands"] }
leptos_wasi= { version = "*", optional = true }
leptos_router = { version = "*", features = ["nightly"] }
tracing = { version = "*", optional = true }
uuid = { version = "*", features = ["serde", "v4"] }
cookie = { version = "*", features = ["percent-encode", "private"] }
thaw = { version = "*", features = ["nightly"], optional = true }
leptos-use = { version = "*" }
dotenv = { version = "*", optional = true }
# sea-orm = { version = "*", optional = true, features = [
#     "sqlx-postgres",
#     "runtime-tokio-native-tls",
#     "macros",
#     "with-time",
#     "with-json",
#     "postgres-array",
# ] }

# idgen = { path = "idgen" }
# layer = { path = "layer", optional = true }
# entity = { path = "entity", optional = true }
# pool = { path = "pool", optional = true }
# volo-gen = { path = "volo-gen" }

[workspace.package]
version = "0.0.1"
edition = "2021"

[workspace.dependencies]
# dapr = "*"
volo = "*"
volo-grpc = "*"
volo-build = "*"
anyhow = "*"
async-trait = "*"
futures = "*"
pilota = "*"
mime = "*"
serde = "*"
serde_yaml = "*"
serde_json = "*"
tracing = "*"
prost-types = "*"
chrono = "*"
console_error_panic_hook = "*"
wasm-bindgen = "*"
thiserror = "*"
http = "*"
jsonwebtoken = "*"
bytes = "*"
http-body = "*"
forwarded-header-value = "*"
apache_age = "*"
tokio-postgres = "*"
dotenv = "*"
sonic-rs = "*"
lazy_static = "*"
tracing-subscriber = "*"
axum = "*"
axum-macros = "*"
leptos = "*"
leptos_axum = "*"
leptos_meta = "*"
leptos_router = "*"
leptos-use = "*"
utoipa = "*"
utoipa-swagger-ui = "*"
sea-orm = "*"
argon2 = "*"
nacos-sdk = "*"
uuid = "*"
cookie = "*"
bb8 = "*"
redis = "*"
bb8-redis = "*"
bb8-postgres = "*"
pin-project = "*"
sodiumoxide = "*"
regex = "*"
libloading = "*"
pingora = "*"
tokio = "*"

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"


# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

# == Hydrate (client)
lib-profile-release = "wasm-release"
lib-features = ["hydrate"]

# ==== Rebuild the std crates using the optimized profile.
lib-cargo-args = [
    "-Zbuild-std=std,panic_abort,core,alloc",
    "-Zbuild-std-features=panic_immediate_abort",
]

# == SSR
bin-profile-release = "wasm-release"
bin-target-triple = "wasm32-wasip2"
bin-features = ["ssr"]
bin-target-dir = "target/server"

# ==== Rebuild the std crates using the optimized profile.
bin-cargo-args = [
    "-Zbuild-std=std,panic_abort,core,alloc",
    "-Zbuild-std-features=panic_immediate_abort,wasi_ext",
]
